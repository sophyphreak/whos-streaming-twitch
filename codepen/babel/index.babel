class App extends React.Component {
  render() {
    return (
      <div>
        <div className="title">
          <h2>Who's Streaming on Twitch Right Now?</h2>
          <h5>Created by Andrew Horn</h5>
        </div>
        <TwitchList/>
      </div>
    );
  }
};

class TwitchList extends React.Component {
  
  constructor (props) {
    super(props);
    this.state = {
      jsons: {}
    };
    const twitches = ["ESL_SC2", "OgamingSC2", "cretetion", "freecodecamp", "storbeck", "habathcx", "RobotCaleb", "noobs2ninjas"];
    this.populateJsons(twitches);
  };
    
  populateJsons (twitches) {
    twitches.map((twitch) => {
    let axiosUrl = 'https://cors-anywhere.herokuapp.com/https://wind-bow.gomix.me/twitch-api/streams/' + twitch;
    
      axios
        .get(axiosUrl)
        .then(res => {
          if(res.data.stream) {
            let jsons = {};
            jsons[twitch] = [res.data.stream.game, res.data.stream.channel.status];
            jsons = Object.assign(jsons, this.state.jsons);
            this.setState({ jsons });
          } else {
            let jsons = {};
            jsons[twitch] = null;
            jsons = Object.assign(jsons, this.state.jsons);
            this.setState({ jsons });
          };
        })
        .catch(error => {
          console.log(error, twitch);
        });
    });
  };
  
  renderTwitches() {
    return Object.keys(this.state.jsons).map((key) => {
      try {
        return <Twitch json={this.state.jsons[key]} name={key}/>;
      } catch (e) {
        console.log(e);
      }
    });
  };
  
  render() {
    return (
      <div className="twitch-list">
        {Object.keys(this.state.jsons).length === 8 ? this.renderTwitches() : Object.keys(this.state.jsons).length/8*100 + "% loaded"}
      </div>
    );
  }
};
        
class Twitch extends React.Component {
  constructor(props) {
    super(props);
  }
  
  renderTwitch(props) {
    let hyperlink = 'https://www.twitch.tv/' + this.props.name;
    
    if(this.props.json == null) {
      return (
        <div>
          <p><a href={hyperlink} target="_blank">{this.props.name}</a>--------- Offline for now</p>
        </div>
      );
    } else {
      return (
        <div>
          <p>
            <a href={hyperlink} target="_blank">
              {this.props.name}
            </a>
            --------- {this.props.json[0]}: {this.props.json[1]}
          </p>
        </div>
      );
    };
  };
  

  
  render() {
    return (
      <div>
        {this.renderTwitch(this.props)}
      </div>
    );
  }
};

ReactDOM.render(
  <App/>,
  document.getElementById("container")
);